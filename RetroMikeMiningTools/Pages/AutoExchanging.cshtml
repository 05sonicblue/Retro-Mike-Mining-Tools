@page
@model AutoExchangingModel
@{
    ViewData["Title"] = "Auto Exchanging";
    ViewData["CardTitle"] = "Configuration";
}

@using Kendo.Mvc.UI
@using RetroMikeMiningTools.DO
@using RetroMikeMiningTools.DTO
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

<style>
  #logGrid > table
  {
      table-layout: fixed;
  }
  .k-grid td{
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width : 150px;
  }
  .k-grid .k-dirty {
    display: none;
  }

</style>
<script>
    function coinsTemplate(items) {
        if(items){
        //alert(items);
        var template = "<ul>";
        for (var i = 0; i < items.length; i++){
            template += "<li>" + items[i].Ticker + "</li>";
        }
        template += "</ul>";
        return template;
        }
        return '';
    }

    function cleanText(item){
        if(item){
            return item;
        }else{
            return "";
        }
    }
</script>
@(Html.Kendo().Grid<ExchangeConfig>
    ().Name("grid")
    .Sortable()
    .Editable()
    .ToolBar(toolbar=> {
        toolbar.Create();
    })
    .Columns(columns =>
    {
        columns.Bound(column => column.Exchange);
        columns.Bound(column => column.DestinationCoin).ClientTemplate("#=cleanText(DestinationCoin?.Ticker)#");
        columns.Bound(column => column.ExcludedSourceCoins).ClientTemplate("#=coinsTemplate(ExcludedSourceCoins)#");
        columns.Bound(column => column.TradingPairCurrency).ClientTemplate("#=cleanText(TradingPairCurrency?.Ticker)#");
        columns.Bound(column => column.Enabled);
        columns.Bound(column => column.ApiKey);
        columns.Bound(column => column.ApiSecret);
        columns.Command(column =>
        {
            column.Edit();
            column.Destroy();
        }).Width(200);
    })
    .DataSource(ds => ds.Ajax()
    .Read(r => r.Url("/AutoExchanging?handler=Read").Data("forgeryToken"))
    .Update(u => u.Url("/AutoExchanging?handler=Update").Data("forgeryToken"))
    .Create(c => c.Url("/AutoExchanging?handler=Create").Data("forgeryToken"))
    .Destroy(d => d.Url("/AutoExchanging?handler=Destroy").Data("forgeryToken"))
    .Model(m => {
        m.Id(id => id.Id);
        m.Field(o => o.ExcludedSourceCoins).DefaultValue(new List<Coin>());
            m.Field(o => o.DestinationCoin).DefaultValue(new Coin());
            m.Field(o => o.TradingPairCurrency).DefaultValue(new Coin());
    })
    )
)
<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
    function exchangeIdChanged(e){
        var exchangeId = $("#Exchange").val();
        if (exchangeId) {
            $("#DestinationCoin").data("kendoDropDownList").dataSource.read({ exchangeId: exchangeId });
            $("#ExcludedSourceCoins").data("kendoMultiSelect").dataSource.read({ exchangeId: exchangeId });
            $("#TradingPairCurrency").data("kendoDropDownList").dataSource.read({ exchangeId: exchangeId });
        }
    }
    function multiListOpen(e){
        var exchangeId = $("#Exchange").val();
        $("#ExcludedSourceCoins").data("kendoMultiSelect").dataSource.read({ exchangeId: exchangeId });
    }
    function ddlOpen(e){
        var exchangeId = $("#Exchange").val();
        if (exchangeId) {
            e.sender.dataSource.read({ exchangeId: exchangeId });
        }
    }
</script>