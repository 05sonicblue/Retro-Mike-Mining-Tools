@page
@model AsicsModel
@{
    ViewData["Title"] = "ASIC Settings";
    ViewData["CardTitle"] = "Configuration";
}

@using Kendo.Mvc.UI
@using RetroMikeMiningTools.DTO
@using RetroMikeMiningTools.DO
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()
<script>
    function groupsTemplate(groups) {
        var template = "<ul>";
        for (var i = 0; i < groups.length; i++) {
            template += "<li>" + groups[i].Name + "</li>";
        }
        template += "</ul>";
        return template;
    }
    function wtmEndpointTemplate(WtmEndPoint) {
        if (WtmEndPoint) {
            return WtmEndPoint.substring(0, 20) + '...';
        }
        return '';
    }
    function tickerTemplate(ticker) {
        if (ticker) {
            return ticker.replace('ZergProvider-', '').replace('ZpoolProvider-', '');
        }
        return '';
    }
    function maskData(data) {
        if(data){
            return data.substring(0,3) + '.......';
        }
        return '';
    }
</script>
<div class="k-card-header">
    <h4>ASIC's</h4>
    Configure the ASIC's that you want to use for coin switching and then select the row to set the coins for that ASIC
</div>
<div class="k-card-body">
    @(
        Html.Kendo().Grid<AsicConfig>
        ().Name("asicsGrid")
        .Selectable()
        .Sortable()
        .Editable()
        .Filterable()
        .Events(x => x.Change("handleAsicSelection"))
        .ToolBar(toolbar=> {
            toolbar.Create();
        })
        .Columns(columns =>
        {
            columns.Bound(column => column.Name);
            columns.Bound(column => column.AsicType);
            columns.Bound(column => column.MiningMode).Width(200);
            columns.Bound(column => column.PinnedTicker);
            columns.Bound(column => column.DeviceIP);
            columns.Bound(column => column.ApiKey).ClientTemplate("#=maskData(ApiKey)#");
            columns.Bound(column => column.AdditionalPower);
            if (!Model.IsMultiUser)
            {
                columns.Bound(column => column.Profit).ClientFooterTemplate("Profit: #=kendo.toString(sum,'c2')#");
                columns.Bound(column => column.SmartPlugType).ClientHeaderTemplate("Smart<br/>Plug<br/>Type");
                columns.Bound(column => column.SmartPlugHost).ClientHeaderTemplate("Smart<br/>Plug<br/>Host");
                columns.Bound(column => column.RigMinProfit);
            }
            columns.Bound(column => column.Enabled);
            columns.Command(column =>
        {
            column.Edit();
            column.Destroy();
        });
    })
    .DataSource(ds => ds.Ajax()
    .Read(r => r.Url("/Asics?handler=Read").Data("forgeryToken"))
    .Update(u => u.Url("/Asics?handler=Update").Data("forgeryToken"))
    .Create(c => c.Url("/Asics?handler=Create").Data("forgeryToken"))
    .Destroy(d => d.Url("/Asics?handler=Destroy").Data("forgeryToken"))
    .Aggregates(aggregates =>
        {
            aggregates.Add(p => p.Profit).Sum();
        })
    .Model(m =>
        {
            m.Id(id => id.Id);
            m.Field(x => x.Profit).Editable(false);
        }))
    )
</div>
<div class="k-card-footer"></div>

<div id="coinContainer">
    <br />
    <div class="k-card-header">
        <h4>ASIC Coins</h4>
        Configure the coins that you want the selected ASIC to switch between
    </div>
    <div class="k-card-body">
        @(Html.Kendo().Grid<AsicCoinConfig>
            ().Name("asicCoinsGrid")
            .Sortable()
            .Editable()
            .Filterable()
            .ToolBar(toolbar =>
            {
                toolbar.Create();
                //toolbar.Custom().Text("Import Coins").HtmlAttributes(new { id = "importCoins" });
                //toolbar.Custom().Text("Refresh Coins Hashrates from WTM").HtmlAttributes(new { id = "refreshHashrates" });
            })
            .Columns(columns =>
            {
                columns.Bound(column => column.Ticker).Width(200).ClientTemplate("#=tickerTemplate(Ticker)#");
                columns.Bound(column => column.HashRateMH).ClientHeaderTemplate("Hashrate (MH)");
                columns.Bound(column => column.OverrideEndpoint).ClientHeaderTemplate("WTM<br/>Endpoint").ClientTemplate("#=wtmEndpointTemplate(OverrideEndpoint)#");
                columns.Bound(column => column.Power);
                columns.Bound(column => column.Pool).ClientTemplate("#=wtmEndpointTemplate(Pool)#"); ;
                columns.Bound(column => column.PoolUser).ClientTemplate("#=wtmEndpointTemplate(PoolUser)#");
                columns.Bound(column => column.PoolPassword);
                columns.Bound(e => e.Groups).ClientTemplate("#=groupsTemplate(Groups)#");
                columns.Bound(column => column.Enabled);
                if (!Model.IsMultiUser)
                {
                    columns.Bound(column => column.Profit).ClientHeaderTemplate("Profit");
                }
                columns.Command(column =>
                {
                    column.Edit();
                    column.Destroy();
                }).Width(200);
            })
            .DataSource(ds => ds.Ajax()
            .Sort(x => x.Add("Ticker"))
            .Read(r => r.Url("/Asics?handler=ReadCoins").Data("forgeryToken"))
            .Update(u => u.Url("/Asics?handler=UpdateCoins").Data("forgeryToken"))
            .Create(c => c.Url("/Asics?handler=CreateCoins").Data("forgeryToken"))
            .Destroy(d => d.Url("/Asics?handler=DestroyCoins").Data("forgeryToken"))
            .Model(m =>
            {
                m.Id(id => id.Id);
                m.Field(o => o.Groups).DefaultValue(new List<LinkedGroup>());
                if (!Model.IsMultiUser)
                {
                    m.Field(x => x.Profit).Editable(false);
                }
            })
            )
            )
    </div>
</div>

<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function handleAsicSelection() {
        $("#coinContainer").hide();
        var dataItem = this.dataItem(this.select());
        var miningMode = dataItem.MiningMode;
        if (miningMode != 4) { //4=ZergPoolProfitBasis
            $.ajax({
                url: "/Asics?handler=AsicRowSelect",
                type: 'POST',
                data: {
                    Name: dataItem.Name,
                    Id: dataItem.Id,
                    WhatToMineEndpoint: dataItem.WhatToMineEndpoint
                },
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    $("#coinContainer").show();
                    $('#asicCoinsGrid').data('kendoGrid').dataSource.read();
                    $('#asicCoinsGrid').data('kendoGrid').refresh();
                    $("#asicCoinsGrid").show();
                },
                failure: function (response) {
                    $('#asicCoinsGrid').data('kendoGrid').dataSource.read();
                    $('#asicCoinsGrid').data('kendoGrid').refresh();
                    $("#asicCoinsGrid").hide();
                },
                error: function (response) {
                    $('#asicCoinsGrid').data('kendoGrid').dataSource.read();
                    $('#asicCoinsGrid').data('kendoGrid').refresh();
                    $("#asicCoinsGrid").hide();
                }
            });
        }
    }

    function refreshCoinGrid(e) {
        $("#asicCoinsGrid").data("kendoGrid").bind("dataBound", onGridEdit(e));
    }

    function onGridEdit(e) {
         e.sender.one("dataBound", function (e) {
             e.sender.dataSource.read();
         });
    }

    $(document).ready(function () {
        $("#coinContainer").hide();
        $("#asicCoinsGrid").data("kendoGrid").bind("save", refreshCoinGrid);
    });
</script>